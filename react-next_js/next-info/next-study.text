* NEXT.js 초기 설정 *
1. npm init -y
2. JSON script license -> MIT <- 이름 변경
3. npm install react@latest next@latest react-dom@latest
   (react, next, react-dom 최신 버전 설치)
4. app 폴더생성 후 page.tsx or page.jsx 만들기 (page.tsx가 있어야지 노출됨)
5. npm run dev 해보기

#2 [🔥 2024 Update 🔥] Routing

# 2.1
Defining Routes

Creating Routes
Next.js는 폴더를 사용하여 경로를 정의하는 파일 시스템 기반 라우터를 사용합니다.
각 폴더는 URL 세그먼트에 매핑되는 경로 세그먼트를 나타냅니다.
중첩된 경로를 만들려면 폴더를 서로 중첩하면 됩니다.
ex) app/dashboard/setting/page.tsx

Creating UI
각 경로 세그먼트에 대한 UI를 생성하는 데 특수 파일 규칙이 사용됩니다. 가장 일반적인 것은 경로에 고유한 UI를 표시하는 페이지와 여러 경로에서 공유되는 UI를 표시하는 레이아웃입니다.
예를 들어 첫 번째 페이지를 만들려면 앱 디렉터리 내에 page.js 파일을 추가하고 React 컴포넌트를 내보냅니다.
ex) app/page.tsx

https://nextjs.org/docs/app/building-your-application/routing/defining-routes

# 2.2
Not Found
not-found.tsx은 일치하지 않는 전역 URL을 처리합니다.
https://nextjs.org/docs/app/api-reference/file-conventions/not-found

usePathname --> "use client"; 사용해야함
usePathname은 현재 URL의 pathname을 읽을 수 있게 해주는 클라이언트 컴포넌트 훅입니다.
https://nextjs.org/docs/app/api-reference/functions/use-pathname

React client hook in Server Component 오류
서버 컴포넌트에서 React 클라이언트 훅을 사용하고 있을 때 발생하는 오류로 'use client' 를 추가해 클라이언트 컴포넌트로 바꿔줘야 함
https://nextjs.org/docs/messages/react-client-hook-in-server-component

# 2.3
렌더링이란?
Next.js가 리액트 컴포넌트를 브라우저가 이해할 수 있는 html로 변환하는 작업

CSR
모든 렌더링이 클라이언트 측에서 발생
브라우저는 서버로부터 HTML 껍데기와 자바스크립트 번들 파일을 받아 UI를 빌드함

SSR
브라우저의 요청이 있을 때마다 서버에서 HTML을 생성하고, 반환함

Next.js에서 모든 컴포넌트와 페이지들은 먼저 서버에서 렌더됨
('use client' 사용 여부와 상관없음)

⭐️⭐️'use client' 키워드가 있든 없든 Next.js에서 컴포넌트는 서버에서 렌더링된다⭐️⭐️

⭐️ CSR (Client-Side Rendering)
CSR은 웹페이지 렌더링의 주체가 **클라이언트(브라우저)**인 방식입니다. 사용자가 웹사이트에 접속하면 서버는 텅 빈 HTML 파일과 JavaScript 파일을 보냅니다. 이후 브라우저가 이 JavaScript를 다운로드하고 실행하여 필요한 데이터를 서버로부터 받아와 동적으로 페이지를 그립니다. React, Vue.js, Angular 같은 SPA(Single-Page Application) 프레임워크가 주로 이 방식을 사용합니다.

장점:
- 빠른 페이지 전환: 첫 페이지 로딩 이후에는 필요한 데이터만 받아와 화면을 업데이트하기 때문에 페이지 이동이 매우 빠르고 부드럽습니다.
- 서버 부하 감소: 렌더링 작업을 클라이언트가 담당하므로 서버의 부담이 줄어듭니다.

단점:
- 느린 첫 로딩: 모든 JavaScript 파일을 다운로드하고 실행해야 페이지가 보이기 때문에 초기 로딩 시간이 길어질 수 있습니다.
- SEO(검색 엔진 최적화) 불리: 검색 엔진 크롤러가 빈 HTML을 보고 페이지의 내용을 파악하기 어려울 수 있습니다. (최근 구글은 개선되었지만, 여전히 일부 검색 엔진에서는 문제가 될 수 있습니다.)

⭐️ SSR (Server-Side Rendering)
SSR은 웹페이지 렌더링의 주체가 서버인 방식입니다. 사용자가 웹사이트에 접속하면 서버가 데이터베이스에서 필요한 정보를 가져와 이미 완성된 HTML 파일을 만들어 브라우저로 보냅니다. 브라우저는 완성된 HTML을 받자마자 바로 화면에 보여줄 수 있습니다.

장점:
- 빠른 첫 로딩: 사용자가 완성된 HTML을 바로 볼 수 있어 페이지가 빠르게 표시됩니다.
- SEO 최적화: 검색 엔진 크롤러가 완성된 HTML을 쉽게 읽을 수 있으므로 SEO에 매우 유리합니다.

단점:
- 잦은 서버 요청: 페이지를 이동할 때마다 서버가 새로운 HTML을 만들어 보내야 하므로 서버에 부담이 커질 수 있습니다.
- 느린 페이지 전환: 페이지 이동 시마다 전체 페이지를 새로고침하는 것처럼 깜빡이는 현상이 발생할 수 있습니다.


# 2.4

# 2.5

# 2.6

# 2.7

# 2.8

# 2.9








